name: Java Maven CI Pipeline

on:
  push:
    branches: [main]

permissions:
  contents: write

env:
  TAG: 1.0.0
  DOCKER_IMAGE: javaproject

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: Navigate to project directory
      - name: Navigate to project directory
        working-directory: java-project/sysinfo
        run: pwd

      # Step 4: Install dependencies
      - name: Install dependencies
        working-directory: java-project/sysinfo
        run: sudo apt-get update && sudo apt-get install -y wget unzip maven

      # Step 5: Validate Maven project
      - name: Validate Maven project
        working-directory: java-project/sysinfo
        run: mvn validate

      # Step 6: Build Maven project
      - name: Build Maven project
        working-directory: java-project/sysinfo
        run: mvn clean install

      # Step 7: Run tests
      - name: Run tests
        working-directory: java-project/sysinfo
        run: mvn test

      # Step 8: Docker login to DockerHub
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 9: Build and push Docker image
      - name: Build and push Docker image
        working-directory: java-project/sysinfo
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.TAG }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.TAG }}

#      # Step 10: SSH into Azure server and deploy
#      - name: SSH into Azure server and deploy
#        run: |
#          sudo apt-get install -y sshpass
#
#          # Connect to Azure server
#          sshpass -p "${{ secrets.AZURE_SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_SERVER_USERNAME }}@${{ secrets.AZURE_SERVER_IP }} << 'EOF'
#
#          # Set environment variables
#          export TAG=${{ env.TAG }}
#          export DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
#          export DOCKER_USER=${{ secrets.DOCKERHUB_USERNAME }}
#
#          # Install Docker if not installed
#          if ! command -v docker &> /dev/null
#          then
#              echo "Installing Docker..."
#              sudo apt-get update
#              sudo apt-get install -y \
#                  apt-transport-https \
#                  ca-certificates \
#                  curl \
#                  gnupg \
#                  software-properties-common
#              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
#              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#              sudo apt-get update
#              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
#          fi
#
#          # Pull the latest Docker image
#          echo "Pulling Docker image: $DOCKER_USER/$DOCKER_IMAGE:$TAG"
#          docker pull $DOCKER_USER/$DOCKER_IMAGE:$TAG
#
#          # Stop and remove existing container if running
#          if [ $(docker ps -q -f name=$DOCKER_IMAGE) ]; then
#              echo "Stopping and removing existing container..."
#              docker stop $DOCKER_IMAGE
#              docker rm $DOCKER_IMAGE
#          fi
#
#          # Run the container with the latest image
#          echo "Running the Docker container..."
#          docker run -d -p 8080:8080 --name $DOCKER_IMAGE $DOCKER_USER/$DOCKER_IMAGE:$TAG
#
#          EOF
#